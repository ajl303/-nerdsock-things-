{"name":"Cast a Spell","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/book.svg","scope":"global","command":"/*\nMacro that goes through the selected actor's list of items\nand populates a drop down menu with the name of every spell\nthat isn't a cantrip or focus spell, in order by spell level.\n\nThen, it runs a macro corresponding to the name of the \nselected spell. If none exists, it runs the default macro\nfor the spell, as though it were cast from a character sheet.\n*/\nmain()\n\nasync function main(){\n\tlet menu = ` <form class=\"flexcol\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"exampleSelect\">Please select a spell:</label>\n\t\t\t\t\t\t\t<select name=\"exampleSelect\">`;\n\t//get array of spells from selected actor\n\tif(game.canvas.tokens.controlled.length > 1 || game.canvas.tokens.controlled.length < 1){\n\t\tui.notifications.error(\"Please select exactly one token.\");\n\t\tgame.macros.getName(\"Lagomorph\").execute();\n\t\treturn;\n\t}\n\tlet caster = game.canvas.tokens.controlled[0];\n\tlet itemArray = caster.actor.data.items.contents;\n\tlet spellArray = [];\n\t/*initialize nameString with the names of spells you don't\n\twant on the dropdown list*/\n\tlet nameString = \"(Vital Beacon)(Wall of Fire)(Alarm)\";\n\tlet item = undefined;\n\t/*\n\tItterate through actor's items, record all spells, when adding a spell\n\tcompare it to a string of names to ensure it is not a duplicate.\n\t*/\n\tfor(let i = 0; i < itemArray.length; i++){\n\t\titem = itemArray[i];\n\t\tlet tempSpellName = \"(\"+item.data.name+\")\"\n\t\tif(item.data.type == \"spell\" && !item.isCantrip && !item.isFocusSpell && !nameString.includes(tempSpellName)){\n\t\t\tspellArray.push(itemArray[i]);\n\t\t\tnameString = nameString + tempSpellName; \n\t\t}\n\t}\n\tconsole.log(\"menu:\" , menu);\n\tconsole.log(\"spell array:\", spellArray);\n\tif(spellArray.length < 1){\n\t\tui.notifications.info(\"This character does not have spells to cast.\");\n\t\treturn;\n\t}\n\t//sort spellArray by minimum spell level\n\tspellArray.sort(function(a,b){return a.data.data.level.value - b.data.data.level.value});\n\t\n\t/*append to the html of the prompt a dragdown menu \n\toption for each item in spellArray.*/\n\tfor(let i = 0; i < spellArray.length; i++){\n\t\tmenu = menu + `<option value=${i}>${spellArray[i].data.name}</option>`;\n\t}\n\tlet d = new Dialog({\n\t  \ttitle: 'Spell Selection',\n\t\tcontent: menu + `</select>\n\t\t\t\t</div>\n\t\t\t</form>\n\t  `,\n\t\tbuttons: {\n\t\t\tyes: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: 'Confirm',\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet select = html.find('[name=\"exampleSelect\"]').val();\n\t\t\t\t\tconsole.log(spellArray[parseInt(select)].data.name);\n\t\t\t\t\tlet spell = spellArray[parseInt(select)];\n\t\t\t\t\tlet tempBool = game.macros.getName(spell.data.name);\n\t\t\t\t\t//tempBool == undefined : game.pf2e.rollItemMacro(spell.data._id) ? tempBool.execute();\n\t\t\t\t\tcast(spellArray[parseInt(select)]);\n\t\t\t\t\t//game.macros.getName(spellArray[parseInt(select)].data.name).execute();\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tdefault: 'yes',\n\t\tclose: () => {\n\t\t\tconsole.log('Spell macro closed without a selection.');\n\t\t}\n\t}).render(true);\n}\n\nasync function cast(spell){\n\tlet overrideMacro = game.macros.getName(spell.data.name);\n\tif(overrideMacro != undefined){\n\t\toverrideMacro.execute();\n\t\treturn;\n\t}\n\t/*if no macro corresponding to spell's name, find it\n\t  on the caster's sheet and use that.*/\n\tgame.pf2e.rollItemMacro(spell.data._id);\n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.NcNVGI7ZkHzxyLhu"}},"_id":"2XfsiApmq9NjJQUP"}
{"_id":"AKmfjum2SuXzNMco","name":"Strikes","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/sword.svg","scope":"global","command":"main();\n\nasync function main(){\n\t/*enter the name of a strike into forbiddenStikes \n\t  in order to stop it from showing up in the menu.*/\n\tlet forbiddenStrikes = \"(Handwraps of Mighty Blows)\";\n\tlet menu = ` <form class=\"flexcol\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"exampleSelect\">Please select a strike:</label>\n\t\t\t\t\t\t\t<select name=\"strike\">`;\n\tlet actor = canvas.tokens.controlled[0].actor;\n\tlet strikeArray = actor.data.data.actions;\n\tfor(let i = 0; i < strikeArray.length; i++){\n\t\tlet tempName = strikeArray[i].name;\n\t\tif(!forbiddenStrikes.includes(tempName)){\n\t\t\tmenu = menu + `<option value=${i}>${tempName}</option>`;\n\t\t}\n\t}\n\tmenu = menu + `</select></div></form>`;\n\tlet sDialog = new Dialog({\n\t\ttitle: 'Strike',\n\t\tcontent: menu,\n\t\tbuttons: {\n\t\t\tok: {\n\t\t\t\ticon:'<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: 'Confirm',\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet index = html.find('[name=\"strike\"]').val();\n\t\t\t\t\ttoHit(strikeArray[index]);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t}).render(true);\n}\n\nasync function toHit(strike){\n\t//let prom = strike.roll({event:event});\n\tlet prom = strike.attack({event:event});\n\tprom.then(function(value){\n\t\tlet message = game.data.messages[game.data.messages.length-1];\n\t\t//console.log(message);\n\t\tlet tempString = message.flavor;\n\t\tif(tempString.includes(\"Critical Hit\")){\n\t\t\tconsole.log(\"Critical hit!\");\n\t\t\tanimation(strike,\"crit\");\n\t\t} else if(tempString.includes(\"Hit\")){\n\t\t\tconsole.log(\"Hit!\");\n\t\t\tanimation(strike,\"hit\");\n\t\t} else if(tempString.includes(\"Critical Miss\")){\n\t\t\tconsole.log(\"Critical Miss.\");\n\t\t\tanimation(strike,\"critmiss\");\n\t\t} else {\n\t\t\tconsole.log(\"Miss.\");\n\t\t\tanimation(strike,\"miss\");\n\t\t}\n\t});\n}\n\nasync function animation(strike,dos){\n\t/*change to initialize a macro name based on what\n\t  type of strike it is, then run through a degree\n\t  of success switch statement */\n\tlet macroName = \"\";\n\tif(strike.ammunition != undefined && strike.ammunition.compatible.length > 0){\n\t\t//is ranged weapon\n\t\tif(strike.ammunition.compatible[0].name.includes(\"Rounds\")){\n\t\t\t//is gun\n\t\t\tmacroName = \"ShootGunSequence\";\n\t\t} else {\n\t\t\t//is bow/crossbow\n\t\t\tmacroName = \"ShootBowSequence\";\n\t\t}\n\t} else if(strike.name == \"Fist\" || strike.name.includes(\"Unarmed Attack\")){\n\t\t//is unarmed strike\n\t\tmacroName = \"UnarmedStrikeSequence\";\n\t} else {\n\t\t//general case\n\t\tmacroName = strike.name + \"StrikeSequence\";\n\t}\n\t//switch statement to handle degrees of success\n\tswitch(dos){\n\t\tcase(\"crit\"):\n\t\t\t/*is crit. If no crit macro exists, \n\t\t\t  cascade to hit to play the hit macro */\n\t\t\tlet tempMacro = game.macros.getName(macroName + \"Crit\");\n\t\t\tif(tempMacro != undefined){\n\t\t\t\ttempMacro.execute();\n\t\t\t\treturn;\n\t\t\t}\n\t\tcase(\"hit\"):\n\t\t\tgame.macros.getName(macroName).execute();\n\t\t\tbreak;\n\t\tcase(\"critmiss\"):\n\t\t\tlet critMissMac = game.macros.getName(macroName + \"CritMiss\");\n\t\t\tif(critMissMac != undefined){\n\t\t\t\tcritMissMac.execute();\n\t\t\t\treturn;\n\t\t\t}\n\t\tcase(\"miss\"):\n\t\t\tlet missMac = game.macros.getName(macroName + \"Miss\");\n\t\t\tif(missMac != undefined){\n\t\t\t\tmissMac.execute();\n\t\t\t\treturn;\n\t\t\t}\n\t\tdefault:\n\t\t\tconsole.log(\"No animation found.\");\n\t}\n\t\t\t \n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.YtEBJ2ISIj7skz1E"}}}
{"name":"Skills","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/light.svg","scope":"global","command":"main();\n\nasync function main(){\n\t//Set this variable to true if you want to skip the popup\n\tlet skipPopup = true;\n\t//\n\tlet menu = ` <form class=\"flexcol\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"skillSelect\">Please select a skill:</label>\n\t\t\t\t\t\t\t<select name=\"skillSelect\">`;\n\t//get array of spells from selected actor\n\tif(game.canvas.tokens.controlled.length > 1 || game.canvas.tokens.controlled.length < 1){\n\t\tui.notifications.error(\"Please select exactly one token.\");\n\t\tgame.macros.getName(\"Lagomorph\").execute();\n\t\treturn;\n\t}\n\tlet actor = game.canvas.tokens.controlled[0].actor;\n\t//let skills = caster.actor.data.data.items.contents;\n\tlet skillNames = [\"Acrobatics\",\"Arcana\",\"Athletics\",\"Crafting\",\"Deception\",\"Diplomacy\",\"Intimidation\",\"Medicine\",\"Nature\",\"Occultism\",\"Perception\",\"Performance\",\"Religion\",\"Society\",\"Stealth\",\"Survival\",\"Thievery\"];\n\tlet skillShort = [\"acr\",\"arc\",\"ath\",\"cra\",\"dec\",\"dip\",\"itm\",\"med\",\"nat\",\"occ\",\"perception\",\"prf\",\"rel\",\"soc\",\"ste\",\"sur\",\"thi\"]\n\tconsole.log(\"menu:\" , menu);\n\t\n\t/*append to the html of the prompt a dragdown menu \n\toption for each item in skillNames.*/\n\tfor(let i = 0; i < skillNames.length; i++){\n\t\tmenu = menu + `<option value=${i}>${skillNames[i]}</option>`;\n\t}\n\tlet select = undefined;\n\tlet roll = undefined;\n\tlet firstPromise = new Promise(function(resolve, reject){\n\t\tlet d = new Dialog({\n\t\t\ttitle: 'Skill Selection',\n\t\t\tcontent: menu + `</select>\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\t\t  `,\n\t\t\tbuttons: {\n\t\t\t\tyes: {\n\t\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\t\tlabel: 'Confirm',\n\t\t\t\t\tcallback: (html) => {\n\t\t\t\t\t\tselect = html.find('[name=\"skillSelect\"]').val();\n\t\t\t\t\t\t//skillCheck(select,skillNames,skillShort);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t\tdefault: 'yes',\n\t\t\tclose: () => {\n\t\t\t\tconsole.log('Skill macro closed without a selection.');\n\t\t\t}\n\t\t}).render(true);\n\t});\n\tfirstPromise.then(\n\t\tfunction value(){\n\t\t\tconsole.log(\"select:\", select);\n\t\t\tif(select == undefined){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet modifier = 0;\n\t\t\tif(skillShort[select].includes(\"perception\")){\n\t\t\t\tactor.data.data.attributes.perception.roll({skipDialog: skipPopup});\n\t\t\t} else {\n\t\t\t\twindow[\"game\"][\"canvas\"][\"tokens\"][\"controlled\"][0][\"actor\"][\"data\"][\"data\"][\"skills\"][skillShort[select]].roll({skipDialog: skipPopup});\n\t\t\t}\n\t\t}\n\t);\n}\n/*\nasync function skillCheck(skill,names,short){\n\tconsole.log(\"made it to skillCheck\");\n\tlet modifier = 0;\n\tlet actor = game.canvas.tokens.controlled[0].actor;\n\tif(short[skill].includes(\"perception\")){\n\t\tmodifier = actor.data.data.attributes.perception.totalModifier;\n\t} else {\n\t\tmodifier = window[\"game\"][\"canvas\"][\"tokens\"][\"controlled\"][0][\"actor\"][\"data\"][\"data\"][\"skills\"][short[skill]][\"totalModifier\"];\n\t}\n\tlet diceFormula = \"1d20+\";\n\tlet divSight = actor.data.data.custom.modifiers.divSight;\n\tlet confirmation = false;\n\tif(divSight != undefined){\n\t\tconsole.log(\"divSight:\",divSight);\n\t\t//prompt to ask user if they want to use Diviner's Sight\n\t\tlet promise = new Promise(function(resolve, reject){\n\t\t\tconfirmation = Dialog.confirm({\n\t\t\t\ttitle: \"Diviner's Sight\",\n\t\t\t\tcontent: `<p>Would you like to use the value of your Diviner's Sight? (${divSight})`,\n\t\t\t});\n\t\t\tresolve();\n\t\t});\n\t\tpromise.then(\n\t\t\tfunction value(){\n\t\t\t\tif(confirmation){\n\t\t\t\t\tdiceFormula = \"1d20max\" + divSight + \"min\" + divSight + \"+\";\n\t\t\t\t\tlet divEffect = actor.data.items.find(item => item.data.name == \"Effect: Diviner's Sight\");\n\t\t\t\t\tconsole.log(\"divEffect: \", divEffect);\n\t\t\t\t\tdivEffect.delete();\n\t\t\t\t}\n\t\t\t\tlet roll = new Roll(diceFormula + parseInt(modifier));\n\t\t\t\troll.roll();\n\t\t\t\troll.toMessage({ flavor: names[skill]+\":\", speaker: ChatMessage.getSpeaker({actor: actor})});\n\t\t\t\treturn;\n\t\t\t}\n\t\t);\n\t} \n\tlet roll = new Roll(diceFormula + parseInt(modifier));\n\troll.roll();\n\troll.toMessage({ flavor: names[skill]+\":\", speaker: ChatMessage.getSpeaker({actor: actor})});\n\tconsole.log(actor.data.items);\n\t//let roll = new Roll(diceFormula + parseInt(modifier));\n\t//roll.roll();\n\t//roll.toMessage({ flavor: names[skill]+\":\", speaker: ChatMessage.getSpeaker({actor: actor})});\n\t\n}*/","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.TZAJKhbDw6vpBBEn"}},"_id":"CdVMOae7toSPJEnb"}
{"name":"Next Turn","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/down.svg","scope":"global","command":"game.combats.active.nextTurn();","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.ssmTpapIKq1TcLy7"}},"_id":"OeXsa5BJwx6Oqn1I"}
{"name":"Focus Spells","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/eye.svg","scope":"global","command":"/*\nmacro that goes through a selected token's focus spells and\ndisplays them in a dropdown menu. Selecting a spell will\nrun a macro with the same name. \nIf none exists, it runs the default macro for the spell, \nas though it were cast from a character sheet.\n*/\n\nmain()\n\nasync function main(){\n\t/* the first part of the dropdown menu HTML, to be \n\tcompleted algorithmically later in the method.*/\n\tlet menu = ` <form class=\"flexcol\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"exampleSelect\">Please select a spell:</label>\n\t\t\t\t\t\t\t<select name=\"exampleSelect\">`;\n\t//get array of spells from selected actor\n\tif(game.canvas.tokens.controlled.length > 1 || game.canvas.tokens.controlled.length < 1){\n\t\tui.notifications.error(\"Please select exactly one token.\");\n\t\tgame.macros.getName(\"Lagomorph\").execute();\n\t\treturn;\n\t}\n\tlet caster = game.canvas.tokens.controlled[0];\n\t/*\n\tInitialize several variables, and then iterate through\n\tthe selected actor's item list and pop every Focus Spell\n\tinto spellArray.\n\t*/\n\tlet itemArray = caster.actor.data.items.contents;\n\tlet spellArray = [];\n\tlet nameString = \"\";\n\tlet item = undefined;\n\tlet tempName = \"\";\n\tfor(let i = 0; i < itemArray.length; i++){\n\t\titem = itemArray[i];\n\t\ttempName = \"(\"+item.data.name+\")\";\n\t\tif(item.data.type == \"spell\" && item.isFocusSpell && !(nameString.includes(tempName))){\n\t\t\tspellArray.push(item);\n\t\t\tnameString = nameString + tempName;\n\t\t}\n\t}\n\tconsole.log(\"menu:\" , menu);\n\tconsole.log(\"spell array:\", spellArray);\n\tif(spellArray.length < 1){\n\t\tui.notifications.info(\"This character does not have focus spells.\");\n\t\treturn;\n\t}\n\t/* append to the html of the prompt a dragdown menu \n\toption for each item in spellArray. Selecting\n\tan option will return its index in spellArray */\n\tfor(let i = 0; i < spellArray.length; i++){\n\t\tmenu = menu + `<option value=${i}>${spellArray[i].data.name}</option>`;\n\t}\n\tlet selectName = \"\";\n\t/*utilizing a promise in order to ensure the automatic\n\tcurse progression only happens when a Revalation spell\n\tis selected. Otherwise, it will advance before any \n\tspell is selected. Only necessary for Oracles.*/\n\n\tlet d = new Dialog({\n\t\ttitle: 'Spell Selection',\n\t\tcontent: menu + `</select>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t `,\n\t\tbuttons: {\n\t\t\tyes: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: 'Confirm',\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet select = html.find('[name=\"exampleSelect\"]').val();\n\t\t\t\t\tconsole.log(spellArray[parseInt(select)]);\n\t\t\t\t\t//selectName = spellArray[parseInt(select)].data.name;\n\t\t\t\t\tcast(spellArray[parseInt(select)]);\n\t\t\t\t\t//game.macros.getName(selectName).execute();\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tdefault: 'yes',\n\t\tclose: () => {\n\t\t\tconsole.log('Spell macro closed without a selection.');\n\t\t}\n\t}).render(true);\n\t\n}\n\nasync function cast(spell){\n\tlet overrideMacro = game.macros.getName(spell.data.name);\n\tif(overrideMacro != undefined){\n\t\toverrideMacro.execute();\n\t\treturn;\n\t}\n\t/*if no macro corresponding to spell's name, find it\n\t  on the caster's sheet and use that.*/\n\tgame.pf2e.rollItemMacro(spell.data._id);\n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.xyN2Tr2Hvcp7jDvF"}},"_id":"SIzcKUaEkrCRMrSU"}
{"_id":"a4TypyjZZoB0C4YG","name":"Saving Throws","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/hazard.svg","scope":"global","command":"main()\n\nasync function main(){\n\tif(game.canvas.tokens.controlled.length > 1 || game.canvas.tokens.controlled.length < 1){\n\t\tui.notifications.error(\"Please select exactly one token.\");\n\t\tgame.macros.getName(\"Lagomorph\").execute();\n\t\treturn;\n\t}\n\tlet saver = game.canvas.tokens.controlled[0].actor;\n\tlet fortCheck = saver.saves.fortitude.check\n\tlet reflexCheck = saver.saves.reflex.check;\n\tlet willCheck = saver.saves.will.check;\n\tlet strike = new Dialog({\n\t\ttitle: 'Saving Throw',\n\t\tcontent: `<center>Which saving throw?</center>`,\n\t\tbuttons: {\n\t\t\tfort: {\n\t\t\t\ticon: '<i class=\"fas fa-heartbeat\"></i>',\n\t\t\t\tlabel: 'Fortitude',\n\t\t\t\tcallback: () => {\n\t\t\t\t\tconsole.log(\"Chose Fort\");\n\t\t\t\t\tfortCheck.roll(0);\n\t\t\t\t}\n\t\t\t},\n\t\t\treflex: {\n\t\t\t\ticon: '<i class=\"fas fa-running\"></i>',\n\t\t\t\tlabel: 'Reflex',\n\t\t\t\tcallback: () => {\n\t\t\t\t\tconsole.log(\"Chose Reflex\");\n\t\t\t\t\treflexCheck.roll(0);\n\t\t\t\t}\n\t\t\t},\n\t\t\twill: {\n\t\t\t\ticon: '<i class=\"fas fa-brain\"></i>',\n\t\t\t\tlabel: 'Will',\n\t\t\t\tcallback: () => {\n\t\t\t\t\tconsole.log(\"Will selected\");\n\t\t\t\t\twillCheck.roll(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}).render(true);\n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"core":{"sourceId":"Macro.OvueiufEw6cyDMLT"},"advanced-macros":{"runAsGM":false}}}
{"_id":"bAAf16JELou96k5P","name":"Misc. Actions","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/card-joker.svg","scope":"global","command":"/*go through selected actor's list of 'items', get each\n  item that has a non-passive actionType in its ActionData,\n  populate dialog box, run action's macro corresponding\n  to its actionData _id*/\n\nmain();\n\nasync function main(){\n\tlet menu = ` <form class=\"flexcol\">\n\t\t\t\t\t<div class=\"form-group\">\n\t\t\t\t\t\t<label for=\"exampleSelect\">Please select a spell:</label>\n\t\t\t\t\t\t\t<select name=\"exampleSelect\">`;\n\tif(game.canvas.tokens.controlled.length > 1 || game.canvas.tokens.controlled.length < 1){\n\t\tui.notifications.error(\"Please select exactly one token.\");\n\t\tgame.macros.getName(\"Lagomorph\").execute();\n\t\treturn;\n\t}\n\tlet caster = game.canvas.tokens.controlled[0];\n\tlet itemArray = caster.actor.data.items.contents;\n\tlet actionArray = [];\n\tlet item = undefined;\n\t/* Itterate through actor's items, add to actionArray\n\t   if they are misc actions that aren't passive */\n\tfor(let i = 0; i < itemArray.length; i++){\n\t\titem = itemArray[i];\n\t\tif(item.data.type == \"action\" && item.data.data.actionType.value != \"passive\"){\n\t\t\tactionArray.push(item);\n\t\t}\n\t}\n\tif(actionArray.length < 1){\n\t\tui.notifications.info(\"This actor does not have misc actions.\");\n\t\treturn;\n\t}\n\t//append a dropdown menu option for each action\n\tfor(let i = 0; i < actionArray.length; i++){\n\t\tmenu = menu + `<option value=${i}>${actionArray[i].data.name}</option>`;\n\t}\n\tlet d = new Dialog({\n\t\ttitle: 'Action Selection',\n\t\tcontent: menu + `</select>\n\t\t\t\t</div>\n\t\t\t</form>\n\t  `,\n\t\tbuttons: {\n\t\t\tyes: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: 'Confirm',\n\t\t\t\tcallback: (html) => {\n\t\t\t\t\tlet select = html.find('[name=\"exampleSelect\"]').val();\n\t\t\t\t\tact(actionArray[parseInt(select)]);\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tdefault: 'yes',\n\t\tclose: () => {\n\t\t\tconsole.log('Spell macro closed without a selection.');\n\t\t}\n\t}).render(true);\n}\n\nasync function act(action){\n\tlet overrideMacro = game.macros.getName(action.data.name);\n\tif(overrideMacro != undefined){\n\t\toverrideMacro.execute();\n\t\treturn;\n\t}\n\ttry {\n\t\tgame.pf2e.rollItemMacro(action.data._id);\n\t} catch (err){\n\t\tui.info.warn(\"No macro associated with selected action.\");\n\t}\n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.fM98eah9wYGMgs1K"}}}
{"name":"ActorChecker","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/dice-target.svg","scope":"global","command":"let actor = canvas.tokens.controlled[0].actor;\nconsole.log(actor);","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"core":{"sourceId":"Macro.1Bz6eSPF9z0H0Yuf"}},"_id":"hFsT0dqFWd4FZ1AN"}
{"name":"Defensive Statistic Getter","type":"script","author":"gN2IS1aOvb93eNAA","img":"icons/svg/shield.svg","scope":"global","command":"main();\n\nasync function main(){\n\tlet actor = game.canvas.tokens.controlled[0].actor;\n\tlet ac = actor.data.data.attributes.ac.value;\n\tlet fortDC = actor.saves.fortitude.check.value + 10;\n\tlet reflexDC = actor.saves.reflex.check.value + 10;\n\tlet willDC = actor.saves.will.check.value + 10;\n\tlet basicHTML = `AC: ${ac}\n\t\t\t\t<br>Fortitude DC: ${fortDC}\n\t\t\t\t<br>Reflex DC:    ${reflexDC}\n\t\t\t\t<br>Will DC:      ${willDC}`;\n\tlet table = `\n\t\t<table>\n\t\t\t<tr>\n\t\t\t\t<th>Statistic</th>\n\t\t\t\t<th>Value</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>AC:</td>\n\t\t\t\t<td>${ac}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Fortitude DC:</td>\n\t\t\t\t<td>${fortDC}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Reflex DC:</td>\n\t\t\t\t<td>${reflexDC}</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>Will DC:</td>\n\t\t\t\t<td>${willDC}</td>\n\t\t\t</tr>\n\t\t</table>\n\t`;\n\tChatMessage.create({\n\t\tuser: game.user._id,\n\t\tspeaker: ChatMessage.getSpeaker({token: actor}),\n\t\tcontent: table,\n\t\twhisper: [game.user.id]\n\t});\n}","folder":null,"sort":0,"permission":{"default":0,"gN2IS1aOvb93eNAA":3},"flags":{"core":{"sourceId":"Macro.wxenPY20baJ6uHf3"}},"_id":"uwsJIqZU6DWp9Eq0"}
